package MangerApplyTest;
import com.demo.controllers.employer.EmployerApplyController;
import com.demo.dtos.ApplicationHistoryDTO;
import com.demo.services.ApplicationHistoryService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.ui.ModelMap;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;
public class EmployerRejectControllerTest {
    @InjectMocks
    private EmployerApplyController employerApplyController;

    @Mock
    private ApplicationHistoryService applicationHistoryService;

    @Mock
    private RedirectAttributes redirectAttributes;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testReject_ValidId_SaveSuccess() {
        int id = 1;
        ApplicationHistoryDTO dto = new ApplicationHistoryDTO();
        dto.setPostingID(10);

        // Gi·∫£ l·∫≠p d·ªØ li·ªáu t·ª´ service
        when(applicationHistoryService.findByID(id)).thenReturn(dto);
        when(applicationHistoryService.save(dto)).thenReturn(true);

        ModelMap modelMap = new ModelMap();
        String view = employerApplyController.reject(id, modelMap, redirectAttributes);

        // K·∫øt qu·∫£ mong mu·ªën
        System.out.println("‚úÖ Mong mu·ªën: redirect:/employer/apply/index/10");
        System.out.println("üì§ Th·ª±c t·∫ø: " + view);

        // Ki·ªÉm tra g√°n flash message ƒë√∫ng
        verify(redirectAttributes).addFlashAttribute("success", "Th√†nh c√¥ng!");
        assertEquals("redirect:/employer/apply/index/10", view);
    }

    // ‚úÖ Test 2: ID h·ª£p l·ªá, save() th·∫•t b·∫°i
    @Test
    void testReject_ValidId_SaveFail() {
        int id = 2;
        ApplicationHistoryDTO dto = new ApplicationHistoryDTO();
        dto.setPostingID(20);

        // Gi·∫£ l·∫≠p save() tr·∫£ v·ªÅ false
        when(applicationHistoryService.findByID(id)).thenReturn(dto);
        when(applicationHistoryService.save(dto)).thenReturn(false);

        ModelMap modelMap = new ModelMap();
        String view = employerApplyController.reject(id, modelMap, redirectAttributes);

        // K·∫øt qu·∫£ mong mu·ªën
        System.out.println("‚úÖ Mong mu·ªën: redirect:/employer/apply/index/20");
        System.out.println("üì§ Th·ª±c t·∫ø: " + view);

        // Ki·ªÉm tra g√°n flash message th·∫•t b·∫°i
        verify(redirectAttributes).addFlashAttribute("error", "Th·∫•t b·∫°i...");
        assertEquals("redirect:/employer/apply/index/20", view);
    }

    // ‚úÖ Test 3: Ki·ªÉm tra redirect URL c√≥ ƒë√∫ng format kh√¥ng
    @Test
    void testReject_ReturnsCorrectRedirectUrl() {
        int id = 3;
        ApplicationHistoryDTO dto = new ApplicationHistoryDTO();
        dto.setPostingID(99);

        when(applicationHistoryService.findByID(id)).thenReturn(dto);
        when(applicationHistoryService.save(dto)).thenReturn(true);

        ModelMap modelMap = new ModelMap();
        String view = employerApplyController.reject(id, modelMap, redirectAttributes);

        System.out.println("‚úÖ Mong mu·ªën: redirect:/employer/apply/index/99");
        System.out.println("üì§ Th·ª±c t·∫ø: " + view);

        assertEquals("redirect:/employer/apply/index/99", view);
    }

    // ‚úÖ Test 4: findByID tr·∫£ v·ªÅ null ‚Üí s·∫Ω g√¢y NullPointerException n·∫øu kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω
    @Test
    void testReject_FindByIdReturnsNull_ThrowsException() {
        int id = 100;
        when(applicationHistoryService.findByID(id)).thenReturn(null);

        ModelMap modelMap = new ModelMap();
        try {
            employerApplyController.reject(id, modelMap, redirectAttributes);
        } catch (NullPointerException e) {
            System.out.println("‚úÖ Mong mu·ªën: NullPointerException");
            System.out.println("üì§ Th·ª±c t·∫ø: " + e.getClass().getSimpleName());
            return;
        }


    }

    // ‚úÖ Test 5: ModelMap c√≥ ch·ª©a ID sau khi x·ª≠ l√Ω
    @Test
    void testReject_ModelMapContainsId() {
        int id = 5;
        ApplicationHistoryDTO dto = new ApplicationHistoryDTO();
        dto.setPostingID(33);

        when(applicationHistoryService.findByID(id)).thenReturn(dto);
        when(applicationHistoryService.save(dto)).thenReturn(true);

        ModelMap modelMap = new ModelMap();
        String view = employerApplyController.reject(id, modelMap, redirectAttributes);

        System.out.println("‚úÖ Mong mu·ªën: modelMap ch·ª©a id = 5");
        System.out.println("üì§ Th·ª±c t·∫ø: id = " + modelMap.get("id"));

        assertEquals(id, modelMap.get("id"));
    }
}
