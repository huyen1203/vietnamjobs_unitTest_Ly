package ViewPostingApplied;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.demo.dtos.ApplicationHistoryDTO;
import com.demo.entities.ApplicationHistory;
import com.demo.entities.Postings;
import com.demo.repositories.ApplicationHistoryRepository;
import com.demo.services.ApplicationHistoryServiceImpl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
public class ApplicationHistoryServiceImpl_FindAppliedCVTest {
    @Mock
    private ApplicationHistoryRepository repository;

    @Mock
    private ModelMapper modelMapper;

    @InjectMocks
    private ApplicationHistoryServiceImpl service;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void TC55_findAppliedCV_WithValidId_ReturnsDTOList() {
        // Arrange
        int seekerId = 1;
        Postings posting = new Postings();
        posting.setId(101); // N·∫øu Postings c√≥ h√†m setId()

        // Mock d·ªØ li·ªáu entity
        ApplicationHistory history = new ApplicationHistory();
        history.setId(10);
        history.setPostings(posting);

        List<ApplicationHistory> entityList = List.of(history);

        // Mock d·ªØ li·ªáu DTO
        ApplicationHistoryDTO dto = new ApplicationHistoryDTO();
        dto.setId(10);
        dto.setPostingID(101);

        List<ApplicationHistoryDTO> dtoList = List.of(dto);

        // Mock h√†nh vi
        when(repository.findAppliedCV(seekerId)).thenReturn(entityList);
        when(modelMapper.map(eq(entityList), any(Type.class))).thenReturn(dtoList);

        // Act
        List<ApplicationHistoryDTO> result = service.findAppliedCV(seekerId);

        // Assert
        System.out.println("‚úÖ Mong mu·ªën: K√≠ch th∆∞·ªõc = 1, PostingID = 101");
        System.out.println("üì§ Th·ª±c t·∫ø: K√≠ch th∆∞·ªõc = " + result.size() + ", PostingID = " + result.get(0).getPostingID());

        assertEquals(1, result.size());
        assertEquals(101, result.get(0).getPostingID());
    }

    /**
     * ‚úÖ TC56
     * M·ª•c ti√™u: Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ApplicationHistory n√†o
     * ƒê·∫ßu v√†o: seekerId = 2, DB tr·∫£ v·ªÅ list r·ªóng
     * K·∫øt qu·∫£ mong mu·ªën: Tr·∫£ v·ªÅ danh s√°ch r·ªóng
     */
    @Test
    void TC56_findAppliedCV_WithEmptyList_ReturnsEmptyList() {
        int seekerId = 2;
        List<ApplicationHistory> emptyList = Collections.emptyList();
        List<ApplicationHistoryDTO> dtoList = Collections.emptyList();

        when(repository.findAppliedCV(seekerId)).thenReturn(emptyList);
        when(modelMapper.map(eq(emptyList), any(Type.class))).thenReturn(dtoList);

        List<ApplicationHistoryDTO> result = service.findAppliedCV(seekerId);

        System.out.println("‚úÖ TC56 Mong mu·ªën: Danh s√°ch r·ªóng");
        System.out.println("üì§ Th·ª±c t·∫ø: K√≠ch th∆∞·ªõc = " + result.size());

        assertTrue(result.isEmpty());
    }

    /**
     * ‚úÖ TC57
     * M·ª•c ti√™u: Ki·ªÉm tra khi ApplicationHistory c√≥ posting l√† null (b√†i ƒëƒÉng b·ªã xo√°)
     * ƒê·∫ßu v√†o: seekerId = 3, ApplicationHistory.postings = null
     * K·∫øt qu·∫£ mong mu·ªën: Mapping v·∫´n th·ª±c hi·ªán, kh√¥ng n√©m exception, v√† tr·∫£ v·ªÅ danh s√°ch ƒë√∫ng k√≠ch th∆∞·ªõc
     */
    @Test
    void TC57_findAppliedCV_WithNullPosting_NoException() {
        int seekerId = 3;

        ApplicationHistory history = new ApplicationHistory();
        history.setId(20);
        history.setPostings(null); // M√¥ ph·ªèng b√†i ƒëƒÉng ƒë√£ b·ªã xo√°

        List<ApplicationHistory> entityList = List.of(history);

        ApplicationHistoryDTO dto = new ApplicationHistoryDTO();
        dto.setId(20);
        dto.setPostingID(0); // gi·∫£ ƒë·ªãnh DTO v·∫´n ƒë∆∞·ª£c t·∫°o

        List<ApplicationHistoryDTO> dtoList = List.of(dto);

        when(repository.findAppliedCV(seekerId)).thenReturn(entityList);
        when(modelMapper.map(eq(entityList), any(Type.class))).thenReturn(dtoList);

        List<ApplicationHistoryDTO> result = service.findAppliedCV(seekerId);

        System.out.println("‚úÖ TC57 Mong mu·ªën: Kh√¥ng exception, K√≠ch th∆∞·ªõc = 1, PostingID = 0");
        System.out.println("üì§ Th·ª±c t·∫ø: K√≠ch th∆∞·ªõc = " + result.size() + ", PostingID = " + result.get(0).getPostingID());

        assertEquals(1, result.size());
        assertEquals(0, result.get(0).getPostingID());
    }
}
